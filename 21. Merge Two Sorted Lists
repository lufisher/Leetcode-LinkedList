Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
//方法一：通过把两个数组全部的数取出来放进一个vector里面，排序后重构一个新的链表，但是这样消耗的资源确实比较多 O((n+m)log(m+n))
class Solution {
public:
	ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
		if (l1 == NULL&&l2 != NULL)
			return l2;
		if (l1 != NULL&&l2 == NULL)
			return l1;
		if (l1 == NULL&&l2 == NULL)
			return NULL;
		vector<int> newlink;
		while (l1 != NULL) {
			newlink.push_back(l1->val);
			l1 = l1->next;
		}
		while (l2 != NULL) {
			newlink.push_back(l2->val);
			l2 = l2->next;
		}
		sort(newlink.begin(), newlink.end());
		l1 = new ListNode(0); l2 = l1;
		for (int i = 0; i < newlink.size(); ++i) {
			l2->next = new ListNode(newlink[i]);
			l2 = l2->next;
		}
		return l1->next;	
	}
};
//方法二：直接在原来的链表上重构，以链表一为重构的基础
