Reverse a singly linked list.

click to show more hints.

Hint:
A linked list can be reversed either iteratively or recursively. Could you implement both?
//方法一：遍历整个链表，然后并不是真正反转，而是把值反转，链表之间关系并没有改变 O(n)
class Solution {
public:
	ListNode* reverseList(ListNode* head) {
		if (head == NULL)
			return NULL;
		vector<int> reverse;
		ListNode* pnode = head;
		while (pnode != NULL) {
			reverse.push_back(pnode->val);
			pnode = pnode->next;
		}
		pnode = head;
		for (int i = reverse.size() - 1; i >= 0; --i) {
			pnode->val = reverse[i];
			pnode = pnode->next;
		}
		return head;
	}
};
//方法二：这个反转算是真正的反转，就是给链表多加了一条指示链。可以不断用指针顺着链表往后试探，改变next的指向 O(n)
class Solution {
public:
	ListNode* reverseList(ListNode* head) {
		if (head == NULL)
			return NULL;
		if (head->next == NULL)
			return head;
		ListNode* pre = NULL, *cur = head;
		while (cur != NULL) {
			ListNode* temp = cur->next;
			cur->next = pre;
			pre = cur;
			cur = temp;
		}
		return pre;
	}
};
//方法三：用迭代的方法
node* In_reverseList(node* H)
{
    if (H == NULL || H->next == NULL)       //链表为空直接返回，而H->next为空是递归基
        return H;
    node* newHead = In_reverseList(H->next); //一直循环到链尾 
    H->next->next = H;                       //翻转链表的指向
    H->next = NULL;                          //记得赋值NULL，防止链表错乱
    return newHead;                          //新链表头永远指向的是原链表的链尾
}
